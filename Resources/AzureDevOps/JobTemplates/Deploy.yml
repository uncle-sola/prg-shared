parameters:
  AzureSubscription: ''
  AcrResourceGroup: ''
  Environment: ''
  EnvironmentTag: ''
  ResourceGroup: ''
  ParentBusinessTag: ''
  ServiceOfferingTag: ''
  SharedKeyVaultName: ''
  SharedPrefix: ''
  EnvAbbreviation: ''
  SetTagsScriptFilePath: '$(System.DefaultWorkingDirectory)\Set-EsfaResourceGroupTags.ps1'
  SetEsfaResourceGroupTagsScript: 'https://raw.githubusercontent.com/uncle-sola/prg-devops/master/PSScripts/Set-EsfaResourceGroupTags.ps1'
  Location: 'West Europe'
  ArmTemplateFolder: ''



jobs:
- deployment: Deploy_To_${{ parameters.Environment }}
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - task: AzurePowerShell@3
          displayName: 'Azure PowerShell script: Set-ArmParameters'
          inputs:
            azureSubscription: ${{ parameters.AzureSubscription }}
            ScriptPath:  '$(Pipeline.Workspace)/Prg.Shared.Resources.PSScripts/Set-ArmParameters.ps1'
            ScriptArguments: '-Environment "${{ parameters.EnvAbbreviation }}" -Verbose'
            azurePowerShellVersion: LatestVersion
        - checkout: prg-devops
          path: 's/prg-devops/'
        - script: dir $(Build.SourcesDirectory)
        - script: dir $(System.DefaultWorkingDirectory)
        - script: dir $(Pipeline.Workspace)
        - script: dir $(Build.SourcesDirectory)\PSScripts\
        - task: AzurePowerShell@3
          displayName: 'Azure PowerShell script: Install Azure AD'
          inputs:
            azureSubscription: '${{ parameters.AzureSubscription }}'
            ScriptType: InlineScript
            Inline: 'Install-Module AzureAD -Force'
            azurePowerShellVersion: LatestVersion

        - task: PowerShell@2
          name: DownloadSetEsfaResourceGroupTagsScript
          displayName: 'Download Set-EsfaResourceGroupTags script'
          inputs:
            targetType: 'inline'
            script: Invoke-WebRequest -Uri ${{ parameters.SetEsfaResourceGroupTagsScript }} -OutFile ${{ parameters.SetTagsScriptFilePath }}

        - task: AzurePowerShell@3
          displayName:  "Create resource groups with tags"
          inputs:
            azureSubscription: '${{ parameters.AzureSubscription }}'
            ScriptPath: ${{ parameters.SetTagsScriptFilePath }}
            ScriptArguments: '-ResourceGroupName "${{ parameters.ResourceGroup }}" -Location "${{  parameters.Location  }}" -Environment "${{ parameters.EnvironmentTag }}" -ParentBusiness "${{ parameters.ParentBusinessTag }}" -ServiceOffering "${{ parameters.ServiceOfferingTag }}" -Verbose'
            azurePowerShellVersion: LatestVersion

        - task: Tokenization@2 
          displayName: 'Tokenization: Transform file parameters.json'
          inputs:
            SourcePath: '${{ parameters.ArmTemplateFolder }}'
            TargetFileNames: parameters.json

        - task: AzureResourceGroupDeployment@2
          displayName: 'Azure Deployment:Create Or Update Resource Group action on ${{ parameters.ResourceGroup }}'
          inputs:
            azureSubscription: '${{ parameters.AzureSubscription }}'
            resourceGroupName: '${{ parameters.ResourceGroup }}'
            location: '${{ parameters.Location }}'
            csmFile: '${{ parameters.ArmTemplateFolder }}/template.json'
            csmParametersFile: '${{ parameters.ArmTemplateFolder }}/parameters.json'
            deploymentOutputs: '$(ARMOutputs)'

        - task: DeleteFiles@1
          displayName: 'Delete tokenised parameters.json file'
          inputs:
            SourceFolder: '${{ parameters.ArmTemplateFolder }}'
            Contents: parameters.json
          condition: always()

        - task: AzurePowerShell@4
          displayName: 'Assign AcrPull to prg-$(envAbbreviation)-shared-aks'
          inputs:
            azureSubscription: '${{ parameters.AzureSubscription }}'
            ScriptPath: '$(Pipeline.Workspace)/Prg.Shared.Resources.PSScripts/Assign-AcrPull-Permissions-To-Identity.ps1'
            ScriptArguments: '-ResourceGroupName ${{ parameters.AcrResourceGroup }} -ServicePrincipalName "prg-$(envAbbreviation)-shared-aks" -RoleDefinitionName "AcrPull" -Verbose'
            azurePowerShellVersion: LatestVersion

        - task: AzurePowerShell@4
          displayName: 'Assign AcrPull to prg-$(envAbbreviation)-shared-aks-agentpool'
          inputs:
            azureSubscription: '${{ parameters.AzureSubscription }}'
            ScriptPath: '$(Pipeline.Workspace)/Prg.Shared.Resources.PSScripts/Assign-AcrPull-Permissions-To-Identity.ps1'
            ScriptArguments: '-ResourceGroupName ${{ parameters.AcrResourceGroup }} -ServicePrincipalName "prg-$(envAbbreviation)-shared-aks-agentpool" -RoleDefinitionName "AcrPull" -Verbose'
            azurePowerShellVersion: LatestVersion

        - task: PowerShell@2
          displayName: 'Convert ARM Outputs to variables'
          inputs:
            targetType: filePath
            filePath: ' $(Build.SourcesDirectory)/PSScripts/ConvertTo-VSTSVariables.ps1'
            arguments: '-ARMOutput $(ARMOutputs)'

        - task: AzurePowerShell@4
          displayName: 'Store Registry Password in keyvault'
          inputs:
            azureSubscription: '${{ parameters.AzureSubscription }}'
            ScriptPath: '$(Pipeline.Workspace)/Prg.Shared.Resources.PSScripts/Add-ContainerRegistryKeyToVault.ps1'
            ScriptArguments: '-ContainerResourceGroupName $(appSharedResourceGroup) -KeyVaultResourceGroupName $(ResourceGroup) -ContainerRegistryName $(ContainerRegistryAdminUser) -KeyVaultName $(sharedPrefix)-kv -KeyName ContainerRegistryPassword'
            azurePowerShellVersion: LatestVersion

        - task: AzureCLI@2
          displayName: 'Azure CLI script: Output-AksAvailableUpgrades'
          inputs:
            azureSubscription: '${{ parameters.AzureSubscription }}'
            scriptType: ps
            scriptPath: '$(Pipeline.Workspace)/Prg.Shared.Resources.PSScripts/Output-AksAvailableUpgrades.ps1'
            arguments: '-AksResourceGroup $(resourceGroup) -AksServiceName $(AksServiceName) -Verbose'

        - task: AzureCLI@2
          displayName: 'Azure CLI Script Output-FunctionKey'
          inputs:
            azureSubscription:  '${{ parameters.AzureSubscription }}'
            scriptType: ps
            scriptPath: '$(Pipeline.Workspace)/Prg.Shared.Resources.PSScripts/Output-FunctionKey.ps1'
            arguments: '-AzureSubscriptionId $(AzureSubscriptionId) -ResourceGroup $(appSharedResourceGroup) -FunctionAppName $(sharedFunctionAppName) -Verbose'            

        - task: AzurePowerShell@4
          displayName: 'Azure PowerShell script: Test-AksAvailableUpgrades'
          inputs:
            azureSubscription: '${{ parameters.AzureSubscription }}'
            ScriptPath: '$(Pipeline.Workspace)/Prg.Shared.Resources.PSScripts/Test-AksAvailableUpgrades.ps1'
            ScriptArguments: '-GenerallyAvailableUpgradesCount $(GenerallyAvailableUpgradesCount) -Verbose'
            azurePowerShellVersion: LatestVersion

        # Create AKS service principals
        # - task: AzurePowerShell@3
        #   displayName: 'Azure PowerShell script: New-AksServicePrincipals.ps1'
        #   inputs:
        #     azureSubscription: ${{ parameters.AzureSubscription }}
        #     ScriptPath: '$(Pipeline.Workspace)/Dfc.Shared.Resources.PSScripts/New-AksServicePrincipals.ps1'
        #     ScriptArguments: '-AcrResourceGroup ${{ parameters.AcrResourceGroup }} -AksServicePrincipalName ${{ parameters.AksServicePrincipalName }} -AksAdClientApplicationName ${{ parameters.AksAdClientApplicationName }} -AksAdServerApplicationName ${{ parameters.AksAdServerApplicationName }} -AksResourceGroup ${{ parameters.ResourceGroup }} -MonDevOpsScriptRoot $(Build.SourcesDirectory)\PSScripts -SharedKeyVaultName ${{ parameters.SharedKeyVaultName }} -Verbose'
        #     azurePowerShellVersion: LatestVersion
        # # Create shared configuration table
        # - task: AzurePowerShell@4
        #   displayName: 'Create shared configuration table'
        #   inputs:
        #     azureSubscription: ${{ parameters.AzureSubscription }}
        #     ScriptPath: $(Build.SourcesDirectory)/PSScripts/New-TableOnStorageAccount.ps1
        #     ScriptArguments: '-StorageAccountName ${{ parameters.StorageAccountName }} -ResourceGroupName ${{ parameters.ResourceGroup }} -TableName Configuration'
        #     azurePowerShellVersion: LatestVersion
        # # Deploy ARM template
        # - template: AzureDevOpsTemplates/Deploy/StepTemplates/prg-arm-deploy.yml@prg-devops
        #   parameters:
        #     ArmTemplateRoot: '$(Pipeline.Workspace)/Dfc.Shared.Resources.ArmTemplates'
        #     AzureSubscription: ${{ parameters.AzureSubscription }}
        #     EnvironmentTag: ${{ parameters.EnvironmentTag }}
        #     ParentBusinessTag: ${{ parameters.ParentBusinessTag }}
        #     ResourceGroup: ${{ parameters.ResourceGroup }}
        #     ServiceOfferingTag: ${{ parameters.ServiceOfferingTag }}
        # # Remove unneeded APIM APIs
        # - task: AzurePowerShell@4
        #   displayName: 'Remove Default APIs from APIM'
        #   inputs:
        #     azureSubscription: ${{ parameters.AzureSubscription }}
        #     ##TO DO: remove this script from prg-devops when merging this change back to master
        #     ScriptPath: 's/prg-devops/PSScripts/Remove-ApisFromApiManagement.ps1'
        #     ScriptArguments: '-ApisToRemove @( ${{ parameters.ApimApisToRemove }} ) -ApimResourceGroup "${{ parameters.ResourceGroup }}" -ApimServiceName "${{ parameters.SharedPrefix }}-apim"'
        #     azurePowerShellVersion: LatestVersion
        # # Set KeyVault certificate issuer (OAT, PP & PRD only)
        # - task: AzurePowerShell@4
        #   condition: and(succeededOrFailed(), in('${{ parameters.Environment}}', 'OAT_SHARED', 'PP_SHARED', 'PRD_SHARED'))
        #   displayName: 'Azure PowerShell script: Set-KeyVaultCertificateIssuer'
        #   inputs:
        #     azureSubscription: '${{ parameters.AzureSubscription }}'
        #     ScriptPath: '$(Pipeline.Workspace)/Dfc.Shared.Resources.PSScripts/Set-KeyVaultCertificateIssuer.ps1'
        #     ScriptArguments: '-AdministratorPhoneNumber "${{ parameters.CertificateIssuerAdministratorPhoneNumber }}" -CertificateIssuerPassword "${{ parameters.CertificateIssuerPassword }}" -KeyVaultName "${{ parameters.SharedKeyVaultName }}" -CertificateIssuerAccountId "${{ parameters.CertificateIssuerAccountId }}"'
        #     azurePowerShellVersion: LatestVersion
        # # Check for Kubernetes upgrades
        # - task: AzureCLI@2
        #   displayName: 'Azure CLI script: Output-AksAvailableUpgrades'
        #   inputs:
        #     azureSubscription: '${{ parameters.AzureSubscription }}'
        #     scriptType: ps
        #     scriptPath: '$(Pipeline.Workspace)/Dfc.Shared.Resources.PSScripts/Output-AksAvailableUpgrades.ps1'
        #     arguments: '-AksResourceGroup ${{ parameters.ResourceGroup }} -AksServiceName ${{ parameters.AksServiceName }} -Verbose'
        # - task: AzurePowerShell@4
        #   displayName: 'Azure PowerShell script: Test-AksAvailableUpgrades'
        #   inputs:
        #     azureSubscription: '${{ parameters.AzureSubscription }}'
        #     scriptPath: '$(Pipeline.Workspace)/Dfc.Shared.Resources.PSScripts/Test-AksAvailableUpgrades.ps1'
        #     scriptArguments: '-GenerallyAvailableUpgradesCount $(GenerallyAvailableUpgradesCount) -Verbose'
        #     azurePowerShellVersion: LatestVersion
        # - task: Tokenization@2
        #   displayName: 'Tokenization: Transform file kured-1.2.0-dockerhub.yaml'
        #   inputs:
        #     SourcePath: $(Pipeline.Workspace)/Dfc.Shared.Resources.AksManifests/
        #     TargetFileNames: kured-1.2.0-dockerhub.yaml
        # - task: Kubernetes@1
        #   displayName: kubectl deploy kured daemonset
        #   condition: ne('${{ parameters.Environment }}', 'PRD_SHARED')
        #   inputs:
        #     connectionType: Azure Resource Manager
        #     azureSubscriptionEndpoint: ${{ parameters.AzureSubscription }}
        #     azureResourceGroup: ${{ parameters.ResourceGroup }}
        #     kubernetesCluster: ${{ parameters.AksServiceName }}
        #     useClusterAdmin: true
        #     namespace: 'kube-system'
        #     command: 'apply'
        #     arguments: '--filename=$(Pipeline.Workspace)/Dfc.Shared.Resources.AksManifests/kured-1.2.0-dockerhub.yaml'



